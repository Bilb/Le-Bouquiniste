module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateSample {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createSample(data: SampleCreateInput!): Sample!
  updateSample(data: SampleUpdateInput!, where: SampleWhereUniqueInput!): Sample
  updateManySamples(data: SampleUpdateManyMutationInput!, where: SampleWhereInput): BatchPayload!
  upsertSample(where: SampleWhereUniqueInput!, create: SampleCreateInput!, update: SampleUpdateInput!): Sample!
  deleteSample(where: SampleWhereUniqueInput!): Sample
  deleteManySamples(where: SampleWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  sample(where: SampleWhereUniqueInput!): Sample
  samples(where: SampleWhereInput, orderBy: SampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sample]!
  samplesConnection(where: SampleWhereInput, orderBy: SampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SampleConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Sample {
  id: ID!
  isbn: String!
  title: String!
  author: String
}

type SampleConnection {
  pageInfo: PageInfo!
  edges: [SampleEdge]!
  aggregate: AggregateSample!
}

input SampleCreateInput {
  id: ID
  isbn: String!
  title: String!
  author: String
}

input SampleCreateManyInput {
  create: [SampleCreateInput!]
  connect: [SampleWhereUniqueInput!]
}

type SampleEdge {
  node: Sample!
  cursor: String!
}

enum SampleOrderByInput {
  id_ASC
  id_DESC
  isbn_ASC
  isbn_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
}

type SamplePreviousValues {
  id: ID!
  isbn: String!
  title: String!
  author: String
}

input SampleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isbn: String
  isbn_not: String
  isbn_in: [String!]
  isbn_not_in: [String!]
  isbn_lt: String
  isbn_lte: String
  isbn_gt: String
  isbn_gte: String
  isbn_contains: String
  isbn_not_contains: String
  isbn_starts_with: String
  isbn_not_starts_with: String
  isbn_ends_with: String
  isbn_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  AND: [SampleScalarWhereInput!]
  OR: [SampleScalarWhereInput!]
  NOT: [SampleScalarWhereInput!]
}

type SampleSubscriptionPayload {
  mutation: MutationType!
  node: Sample
  updatedFields: [String!]
  previousValues: SamplePreviousValues
}

input SampleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SampleWhereInput
  AND: [SampleSubscriptionWhereInput!]
  OR: [SampleSubscriptionWhereInput!]
  NOT: [SampleSubscriptionWhereInput!]
}

input SampleUpdateDataInput {
  isbn: String
  title: String
  author: String
}

input SampleUpdateInput {
  isbn: String
  title: String
  author: String
}

input SampleUpdateManyDataInput {
  isbn: String
  title: String
  author: String
}

input SampleUpdateManyInput {
  create: [SampleCreateInput!]
  update: [SampleUpdateWithWhereUniqueNestedInput!]
  upsert: [SampleUpsertWithWhereUniqueNestedInput!]
  delete: [SampleWhereUniqueInput!]
  connect: [SampleWhereUniqueInput!]
  set: [SampleWhereUniqueInput!]
  disconnect: [SampleWhereUniqueInput!]
  deleteMany: [SampleScalarWhereInput!]
  updateMany: [SampleUpdateManyWithWhereNestedInput!]
}

input SampleUpdateManyMutationInput {
  isbn: String
  title: String
  author: String
}

input SampleUpdateManyWithWhereNestedInput {
  where: SampleScalarWhereInput!
  data: SampleUpdateManyDataInput!
}

input SampleUpdateWithWhereUniqueNestedInput {
  where: SampleWhereUniqueInput!
  data: SampleUpdateDataInput!
}

input SampleUpsertWithWhereUniqueNestedInput {
  where: SampleWhereUniqueInput!
  update: SampleUpdateDataInput!
  create: SampleCreateInput!
}

input SampleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isbn: String
  isbn_not: String
  isbn_in: [String!]
  isbn_not_in: [String!]
  isbn_lt: String
  isbn_lte: String
  isbn_gt: String
  isbn_gte: String
  isbn_contains: String
  isbn_not_contains: String
  isbn_starts_with: String
  isbn_not_starts_with: String
  isbn_ends_with: String
  isbn_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  AND: [SampleWhereInput!]
  OR: [SampleWhereInput!]
  NOT: [SampleWhereInput!]
}

input SampleWhereUniqueInput {
  id: ID
}

type Subscription {
  sample(where: SampleSubscriptionWhereInput): SampleSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  fullname: String!
  password: String!
  samples(where: SampleWhereInput, orderBy: SampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sample!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  fullname: String!
  password: String!
  samples: SampleCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  fullname_ASC
  fullname_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  fullname: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  fullname: String
  password: String
  samples: SampleUpdateManyInput
}

input UserUpdateManyMutationInput {
  email: String
  fullname: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  fullname: String
  fullname_not: String
  fullname_in: [String!]
  fullname_not_in: [String!]
  fullname_lt: String
  fullname_lte: String
  fullname_gt: String
  fullname_gte: String
  fullname_contains: String
  fullname_not_contains: String
  fullname_starts_with: String
  fullname_not_starts_with: String
  fullname_ends_with: String
  fullname_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  samples_every: SampleWhereInput
  samples_some: SampleWhereInput
  samples_none: SampleWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    